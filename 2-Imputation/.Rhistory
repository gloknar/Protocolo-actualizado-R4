# Paquetes
library(scImpute)
library(scater)
# Opciones
argumento <- commandArgs()[6]
# argumento <- "melanoma"
outDir <- file.path("./datasets", argumento) # Carpeta donde guardaremos todos los archivos relacionados con la imputación del objeto `sce`
if(!dir.exists(outDir)) {                    # Crea la carpeta ./datasets/<nombre del tumor>/  si no existe
dir.create(outDir,recursive = TRUE)
}
num_cores <- 6                               # Usar 1 en Windows (scImpute usa mc.apply...)
# Leemos el dataset del head_neck/melanoma con las células filtradas y a partir
# de él creamos un objeto `sce` con sólo las células tumorales y otro con sólo
# las células no tumorales
filtered_sce <- readRDS(file.path("../1-ReadData/datasets",argumento,"filtered_sce.rds"))
filtered_sce$cellType <- factor(filtered_sce$cellType)
filtered_sce$cellType <- droplevels(filtered_sce$cellType)
filtered_sce_tumor <- filtered_sce[, filtered_sce$cellType == "Malignant"]
filtered_sce_nontumor <- filtered_sce[, filtered_sce$cellType != "Malignant"]
####################################################################################################
####################################################################
###########     1. Preparado de las matrices de TPM      ###########
####################################################################
# Creamos las matrices de TPMs de ambos subconjuntos celulares
# NOTA: el bolsillo `filtered_sce_(non)tumor@assays@data$exprs` contiene la
# expresión génica de las células en formato log2(TPM+1);;
# El bolsillo `filtered_sce_(non)tumor@assays@data$tpm` contiene la expresión
# génica en formato TPM
filtered_sce_tumor_tpm <- tpm(filtered_sce_tumor)        # sinónimo de filtered_sce_tumor@assays@data$tpm y de assay(filtered_sce_tumor,"tpm")
filtered_sce_nontumor_tpm <- tpm(filtered_sce_nontumor)  # sinónimo de filtered_sce_nontumor@assays@data$tpm y de assay(filtered_sce_nontumor,"tpm")
# NOTA: Debemos eliminar los niveles no usados de los factores tumor y cellType
# cada vez que los usemos... Lo hice en el paso 1 del protocolo, pero por algún
# NOTA: Debemos eliminar los niveles no usados de los factores tumor y cellType
# cada vez que los usemos... Lo hice en el paso 1 del protocolo, pero por algún
# motivo no se guarda
labels_tumor$tumor  <- factor(filtered_sce_tumor$tumor)
#######################################################################
###########     0. Carga de paquetes, opciones y datos      ###########
#######################################################################
# Paquetes
library(scImpute)
library(scater)
# Opciones
argumento <- commandArgs()[6]
# argumento <- "melanoma"
outDir <- file.path("./datasets", argumento) # Carpeta donde guardaremos todos los archivos relacionados con la imputación del objeto `sce`
if(!dir.exists(outDir)) {                    # Crea la carpeta ./datasets/<nombre del tumor>/  si no existe
dir.create(outDir,recursive = TRUE)
}
num_cores <- 6                               # Usar 1 en Windows (scImpute usa mc.apply...)
# Leemos el dataset del head_neck/melanoma con las células filtradas y a partir
# de él creamos un objeto `sce` con sólo las células tumorales y otro con sólo
# las células no tumorales
filtered_sce <- readRDS(file.path("../1-ReadData/datasets",argumento,"filtered_sce.rds"))
filtered_sce$cellType <- factor(filtered_sce$cellType)
filtered_sce$cellType <- droplevels(filtered_sce$cellType)
filtered_sce_tumor <- filtered_sce[, filtered_sce$cellType == "Malignant"]
filtered_sce_nontumor <- filtered_sce[, filtered_sce$cellType != "Malignant"]
####################################################################################################
####################################################################
###########     1. Preparado de las matrices de TPM      ###########
####################################################################
# Creamos las matrices de TPMs de ambos subconjuntos celulares
# NOTA: el bolsillo `filtered_sce_(non)tumor@assays@data$exprs` contiene la
# expresión génica de las células en formato log2(TPM+1);;
# El bolsillo `filtered_sce_(non)tumor@assays@data$tpm` contiene la expresión
# génica en formato TPM
filtered_sce_tumor_tpm <- tpm(filtered_sce_tumor)        # sinónimo de filtered_sce_tumor@assays@data$tpm y de assay(filtered_sce_tumor,"tpm")
filtered_sce_nontumor_tpm <- tpm(filtered_sce_nontumor)  # sinónimo de filtered_sce_nontumor@assays@data$tpm y de assay(filtered_sce_nontumor,"tpm")
# Paquetes
library(scImpute)
library(scater)
options(stringsAsFactors = F)
argumento <- commandArgs()
argumento <- "head_neck"
argumento <- argumento[6]
outDir <- file.path("datasets",argumento)   # Crea la carpeta ./datasets/<head_neck o melanoma>/  si no existe. Aquí guardaremos los resultados
if(!dir.exists(outDir) ) {dir.create(outDir, recursive = TRUE)}
argumento
# Paquetes
library(scImpute)
library(scater)
# Opciones
options(stringsAsFactors = F)
argumento <- "head_neck"
outDir <- file.path("datasets",argumento)   # Crea la carpeta ./datasets/<head_neck o melanoma>/  si no existe. Aquí guardaremos los resultados
if(!dir.exists(outDir) ) {dir.create(outDir, recursive = TRUE)}
filtered_sce <- readRDS(file.path("../1-ReadData/datasets",argumento,"filtered_sce.rds"))
filtered_sce$cellType <- factor(filtered_sce$cellType)
filtered_sce$cellType
levels(filtered_sce$cellType)
# filtered_sce$cellType <- droplevels(filtered_sce$cellType)
filtered_sce_tumor <- filtered_sce[, filtered_sce$cellType == "Malignant"]
filtered_sce_nontumor <- filtered_sce[, filtered_sce$cellType != "Malignant"]
filtered_sce_tumor_tpm <- tpm(filtered_sce_tumor)        # sinónimo de filtered_sce_tumor@assays@data$tpm y de assay(filtered_sce_tumor,"tpm")
filtered_sce_nontumor_tpm <- tpm(filtered_sce_nontumor)  # sinónimo de filtered_sce_nontumor@assays@data$tpm y de assay(filtered_sce_nontumor,"tpm")
labels_tumor$tumor
labels_tumor$tumor  <- factor(filtered_sce_tumor$tumor)
filtered_sce_tumor$tumor
# NOTA: Debemos eliminar los niveles no usados de los factores tumor y cellType
# cada vez que los usemos... Lo hice en el paso 1 del protocolo, pero por algún
# motivo no se guarda
labels_tumor$tumor  <- factor(filtered_sce_tumor$tumor)
# NOTA: Debemos eliminar los niveles no usados de los factores tumor y cellType
# cada vez que los usemos... Lo hice en el paso 1 del protocolo, pero por algún
# motivo no se guarda
labels_tumor  <- factor(filtered_sce_tumor$tumor)
labels_tumor
labels_nontumor
filtered_sce_nontumor$cellType
labels_tumor  <- factor(filtered_sce_tumor$tumor)
labels_nontumor <- factor(filtered_sce_nontumor$cellType)  # Mejor asegurarnos de que casteamos el objeto con factor() que eliminar los niveles del factor con droplevels()
write.csv(filtered_sce_tumor_tpm,file.path(outDir,"malignant.tpm"))
write.csv(filtered_sce_nontumor_tpm,file.path(outDir,"non_malignant.tpm"))
# Cargamos el archivo que contiene la longitud de todos los genes humanos en
# pares de bases (esto servía para pasar de TPM a read counts mediante TPM*gene
# length)
all_gene_lengths <- read.table("../Data/gene_length.txt", sep = "\t",
header = F, row.names = 1) # Longitudes en bp
all_gene_lengths
# Comprobamos si tenemos el mismo nº de genes en nuestro dataset y en el archivo
# con las longitudes de los genes
temporary <- intersect(rownames(all_gene_lengths), rownames(filtered_sce_tumor_tpm)) # La intersección busca nombres de genes compartidos en ambos conjuntos de nombres de genes
temporary
temporary
if (length(temporary) != nrow(filtered_sce_tumor_tpm)){ # Compara si el nº de genes en filtered_sce_tumor_tpm y all_gene_lengths es igual. Si todo está bien, no pasa nada, pero si no, emite una advertencia y termina el programa
warning("check the length file")
print(setdiff(rownames(filtered_sce_tumor_tpm), rownames(all_gene_lengths)))
q()
}
# Preparamos el vector de longitudes de genes necesario para scImpute
genelen <- all_gene_lengths[rownames(filtered_sce_tumor_tpm),]
all_gene_lengths
genelen <- as.numeric(as.vector(genelen))
genelen
anyNA(genelen)
labels_tumor
# Imputamos genes con dropout >= 0.5 para evitar sobre-imputación
scimpute(count_path = file.path(outDir, "malignant.tpm"), infile = "csv",
outfile = "csv", out_dir = paste(outDir,"malignant/", sep = "/"),
labeled = TRUE, labels = as.vector(labels_tumor), type = "TPM",
genelen = genelen, drop_thre = 0.5, ncores = num_cores)
num_cores <- 2                               # Usar 1 en Windows (scImpute usa mc.apply...)
