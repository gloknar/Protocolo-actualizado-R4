geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_OXPHOS_Hypoxia.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)
# Ídem para glicólisis e hipoxia
a <- lm(Hipoxia ~ Glicolisis, data)
b <- summary(a)
formula1 <- paste0("y = ",round(a$coefficients[[1]], 2), " + ", round(a$coefficients[[2]], 2), "x ;  R = ", round(sqrt(b$adj.r.squared), 2))
p_valor <- pf(q = b$fstatistic[[1]], df1= b$fstatistic[[2]],
df2= b$fstatistic[[3]], lower.tail = F)
formula2 <- paste0("p-value = ", format(p_valor, digits = 3))
p = ggplot(data, aes(x = Glicolisis, y = Hipoxia)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm",color = "red") +
xlim(data_min, data_max) + ylim(data_min, data_max) +
labs(x = "Glicolisis", y = "Hipoxia") +
theme_classic()  + theme(aspect.ratio = 0.8) +
geom_text(x = 1, y = 3.5, label = formula1) +
geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_Glycolysis_Hypoxia.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)
# # Correlación entre cada tumor (= paciente)
# for( i in neoplasias){
#   each_expr <- assay(tumor_sce[,tumor_sce$tumor == i], "exprs")
#   expr_oxphos <- each_expr[rownames(each_expr) %in% genes_OXPHOS,]
#   expr_glicolisis <- each_expr[rownames(each_expr) %in% genes_glicolisis,]
#   expr_hipoxia <- each_expr[rownames(each_expr) %in% genes_hipoxia,]
#
#   oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)
#   glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)
#   hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)
#   data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)
#   print(paste0("correlacones entre pacientes:",i))
#   print(cor(data))
#  }
# Limpieza RAM
rm(tumor_sce)
gc(verbose = F)
####################################################################################################
##################################################################################################
###########     2. Correlación entre hipoxia, glicólisis y OXPHOS en células sanas     ###########
##################################################################################################
# Hacemos un subset del objeto sce original para quedarnos sólo con las células
# sanas
healthy_sce <- filtered_sce[,filtered_sce$cellType != "Malignant"]
healthy_sce$cellType <-  factor(healthy_sce$cellType)
cell_types <- unique(healthy_sce$cellType)
# Limpieza RAM, ya no necesitamos el objeto filtered_sce
rm(filtered_sce)
gc(verbose = F)
# correlaciones
matriz_corr <- matrix(NA, nrow = length(cell_types), ncol = 3,
dimnames = list(cell_types, c("oxphos_glicolosis","oxphos_hipoxia","glicolisis_hipoxia")))
for (c in cell_types) {
each_expr <- assay(healthy_sce[,healthy_sce$cellType == c], "exprs")   # Obtenemos la matriz TPM de las células del linaje de interés
expr_oxphos <- each_expr[rownames(each_expr) %in% genes_OXPHOS,]         # Obtenemos de ahi la matriz TPM de los genes de OXPHOS
expr_glicolisis <- each_expr[rownames(each_expr) %in% genes_glicolisis,] # Ídem para glicólisis
expr_hipoxia <- each_expr[rownames(each_expr) %in% genes_hipoxia,]       # Y para hipoxia
# Para cada célula, calculamos la expresion media (i.e. actividad de la ruta)
# de los genes que participan en la ruta metabólica OXHPOS, glicólisis e
# hipoxia, respectivamente
oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)
glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)
hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)
data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)  # Agregamos todo en un dataframe
# Rellenamos la matriz de correlaciones previamente inicializada
matriz_corr[c,1] <- cor(data[, c("OXPHOS", "Glicolisis")])[1,2]
matriz_corr[c,2] <- cor(data[,c("OXPHOS", "Hipoxia")])[1,2]
matriz_corr[c,3] <- cor(data[,c("Glicolisis", "Hipoxia")])[1,2]
}
# Guardamos las correlaciones entre las 3 rutas de interés en cada linaje
# celular en un archivo tsv
write.table(matriz_corr,
file.path(outDir,"non-malignant_OXPHOS_Glycolysis_Hypoxia_corr.tsv"),
row.names = T, col.names = NA, sep = "\t")
# Generamos el archivo PDF donde guardaremos el heatmap
pdf(file.path(outDir,"non-malignant_pathways_corr_heatmap.pdf"), onefile = T,
width = 6, height = 9)
# Generamos la paleta de colores: un gradiente de azul a rojo (pasando por el
# blanco) de 100 pasos
color <- colorRampPalette(c("blue", "red"))(100)
# Generamos la paleta de colores: un gradiente de azul a rojo (pasando por el
# blanco) de 100 pasos
color <- colorRampPalette(c("blue", "red"))(50)
# Le decimos al heatmap que use esa paleta de manera gradual, siendo el 2 rojo,
# el 1 blanco y el 0 azul
mybreaks <- c(
seq(0, 0.5, length.out = 25),
seq(0.51, max(matriz_corr), length.out = 25))
# Computamos el heatmap
pheatmap(matriz_corr, cluster_cols = F, cluster_rows = F,
color = color, breaks = mybreaks)
# Lo guardamos en el disco duro
dev.off()
pdf(file.path(outDir,"non-malignant_pathways_corr_heatmap.pdf"), onefile = T,
width = 6, height = 9)
# Generamos la paleta de colores: un gradiente de azul a rojo (pasando por el
# blanco) de 100 pasos
color <- colorRampPalette(c("white", "red"))(50)
# Le decimos al heatmap que use esa paleta de manera gradual, siendo el 2 rojo,
# el 1 blanco y el 0 azul
mybreaks <- c(
seq(0, 0.5, length.out = 25),
seq(0.51, max(matriz_corr), length.out = 25))
# Computamos el heatmap
pheatmap(matriz_corr, cluster_cols = F, cluster_rows = F,
color = color, breaks = mybreaks)
# Lo guardamos en el disco duro
dev.off()
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"low-OXPHOS-gly-hyp-activity-genes")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
tumor_sce
tumor_metabolic_sce <- tumor_sce[rowData(tumor_sce)$metabolic,]
tumor_metabolic_sce
tumor_sce$tumor
factor(tumor_sce$tumor)
tumor_sce$tumor <- factor(tumor_sce$tumor)
tumors <- unique(tumor_sce$tumor)
tumors
# Leemos el archivo de las rutas en las que participan los 1566 genes
# metabólicos (este contiene 85 rutas metabólicas)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
hallmarks <- gmtPathways(hallmark_gmt)
#2.Tumor cells
all_low_cells <- c()
all_high_cells <- c()
for(selected_t in tumors){
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor==selected_t]
each_metabolic_tpm <- assay(each_metabolic_sce,"exprs")
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm)>0,]
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == selected_t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm)>0,]
oxphos_genes <- intersect(pathways[["Oxidative phosphorylation"]],rownames(each_tumor_tpm))
glycolysis_genes <- intersect(pathways[["Glycolysis / Gluconeogenesis"]],rownames(each_tumor_tpm))
hypoxia_genes <- intersect(hallmarks[["HALLMARK_HYPOXIA"]],rownames(each_tumor_tpm))
three_all <- unique(c(oxphos_genes,glycolysis_genes,hypoxia_genes))
oxphos_mean_exprs <- colMeans(each_tumor_tpm[three_all,],na.rm=T)
oxphos_mean_exprs_quantile <- quantile(oxphos_mean_exprs,seq(0,1,0.2))
low_cutoff <- oxphos_mean_exprs_quantile[["20%"]]
high_cutoff <- oxphos_mean_exprs_quantile[["80%"]]
oxphos_low <- which(oxphos_mean_exprs < low_cutoff)
oxphos_high <- which(oxphos_mean_exprs > high_cutoff)
all_low_cells <- c(all_low_cells, colnames(each_tumor_tpm)[oxphos_low])
all_high_cells <- c(all_high_cells, colnames(each_tumor_tpm)[oxphos_high])
if(length(oxphos_low) <5 | length(oxphos_high)<5){
next
}
condition <- factor(c(rep("oxphos_low",length(oxphos_low)),rep("oxphos_high",length(oxphos_high))),levels = c("oxphos_low","oxphos_high"))
each_tumor_tpm_selected <- each_tumor_tpm[,c(oxphos_low,oxphos_high)]
pvalues <- sapply(X = 1:nrow(each_tumor_tpm_selected),
FUN = function(x) {
return(wilcox.test(each_tumor_tpm_selected[x,] ~ condition, alternative="greater")$p.value)
})
pvalues_df <- data.frame(pvalues,row.names=rownames(each_tumor_tpm_selected))
write.table(rownames(pvalues_df[pvalues_df$pvalues<=0.01,,drop=F]),
file=file.path(outDir,paste0(selected_t,"_low_OXPHOS_glycolysis_hypoxia_signature.genes.txt")),
quote=F,row.names=F,col.names=F)
}
warnings()
wilcoxon
??wilcoxon
each_metabolic_sce
each_metabolic_sce
tumores
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"low-OXPHOS-gly-hyp-activity-genes")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce <- tumor_sce[rowData(tumor_sce)$metabolic,]
tumor_sce$tumor <- factor(tumor_sce$tumor)
tumores <- unique(tumor_sce$tumor)
# Leemos el archivo de las rutas en las que participan los 1566 genes
# metabólicos (este contiene 85 rutas metabólicas)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
hallmarks <- gmtPathways(hallmark_gmt)
####################################################################################################
all_low_cells <- c()
all_high_cells <- c()
tumores
for(t in tumores){
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_tpm <- assay(each_metabolic_sce,"exprs")
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm)>0,]
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm)>0,]
oxphos_genes <- intersect(pathways[["Oxidative phosphorylation"]],rownames(each_tumor_tpm))
glycolysis_genes <- intersect(pathways[["Glycolysis / Gluconeogenesis"]],rownames(each_tumor_tpm))
hypoxia_genes <- intersect(hallmarks[["HALLMARK_HYPOXIA"]],rownames(each_tumor_tpm))
three_all <- unique(c(oxphos_genes,glycolysis_genes,hypoxia_genes))
oxphos_mean_exprs <- colMeans(each_tumor_tpm[three_all,],na.rm=T)
oxphos_mean_exprs_quantile <- quantile(oxphos_mean_exprs,seq(0,1,0.2))
low_cutoff <- oxphos_mean_exprs_quantile[["20%"]]
high_cutoff <- oxphos_mean_exprs_quantile[["80%"]]
oxphos_low <- which(oxphos_mean_exprs < low_cutoff)
oxphos_high <- which(oxphos_mean_exprs > high_cutoff)
all_low_cells <- c(all_low_cells, colnames(each_tumor_tpm)[oxphos_low])
all_high_cells <- c(all_high_cells, colnames(each_tumor_tpm)[oxphos_high])
if(length(oxphos_low) <5 | length(oxphos_high)<5){
next
}
condition <- factor(c(rep("oxphos_low",length(oxphos_low)),rep("oxphos_high",length(oxphos_high))),levels = c("oxphos_low","oxphos_high"))
each_tumor_tpm_selected <- each_tumor_tpm[,c(oxphos_low,oxphos_high)]
pvalues <- sapply(X = 1:nrow(each_tumor_tpm_selected),
FUN = function(x) {
return(wilcox.test(each_tumor_tpm_selected[x,] ~ condition, alternative="greater")$p.value)
})
pvalues_df <- data.frame(pvalues,row.names=rownames(each_tumor_tpm_selected))
write.table(rownames(pvalues_df[pvalues_df$pvalues<=0.01,,drop=F]),
file=file.path(outDir,paste0(t,"_low_OXPHOS_glycolysis_hypoxia_signature.genes.txt")),
quote=F,row.names=F,col.names=F)
}
each_metabolic_sce
each_metabolic_tpm
each_tumor_sce
oxphos_genes
glycolysis_genes
oxphos_genes
three_all
oxphos_mean_exprs
oxphos_mean_exprs_quantile
oxphos_low
all_low_cells
all_high_cells
length(oxphos_high)
oxphos_high
oxphos_low
condition
pvalues
##all together
selected_tumor_tpm <- assay(tumor_sce, "exprs")
selected_tumor_tpm
selected_tumor_tpm <- selected_tumor_tpm[rowSums(selected_tumor_tpm)>0,]
selected_tumor_tpm <- selected_tumor_tpm[rowSums(selected_tumor_tpm) > 0,]
condition <- factor(c(rep("oxphos_low",length(all_low_cells)),rep("oxphos_high",length(all_high_cells))),levels = c("oxphos_low","oxphos_high"))
selected_tumor_tpm_selected <- selected_tumor_tpm[,c(all_low_cells,all_high_cells)]
pvalues <- sapply(X = 1:nrow(selected_tumor_tpm_selected),
FUN = function(x) {
return(wilcox.test(selected_tumor_tpm_selected[x,] ~ condition, alternative="greater")$p.value)
})
pvalues_df <- data.frame(pvalues,row.names=rownames(selected_tumor_tpm_selected))
# Guardamos aquellos genes con un p-valor < 0.01 en un archivo
write.table(rownames(pvalues_df[pvalues_df$pvalues<=0.01,,drop=F]),
file=file.path(outDir,paste0("ALL","_low_OXPHOS_glycolysis_hypoxia_signature.txt")),
quote=F,row.names=F,col.names=F)
#####################################################################
###########     0. Carga de paquetes, opciones y datos      ###########
#######################################################################
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
library(scran)
source("../utils.R")
source("runGSEA_preRank.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("datasets",argumento)
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = T)
}
###update:: using scran to quantify the technical component of the variance
# Leemos el archivo con las rutas metabólicas de KEGG
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
# Leemos el dataset del head_neck/melanoma con las células filtradas y a partir
# de él creamos un objeto `sce` con las células tumorales y los genes
# metabólicos
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
filt_tumor_metab_sce <- filtered_sce[rowData(filtered_sce)$metabolic, filtered_sce$cellType == "Malignant"]
# Cargamos los tipos de tumores presentes en el dataset
filt_tumor_metab_sce$tumor <- droplevels(filt_tumor_metab_sce$tumor)
tumors <- unique(filt_tumor_metab_sce$tumor)
####################################################################################################
####################################################################
###########     1. Selección de genes de referencia      ###########
####################################################################
#2.Tumor cells
enrich_data_df <- data.frame(x = numeric(), y = numeric(),
NES = numeric(), PVAL = numeric())
str(enrich_data_df)
pc_plotdata <- data.frame(x = numeric(), y = numeric(),
sel = character(), tumor = character())
t = "MEL7"
each_metabolic_sce <- filt_tumor_metab_sce[,filt_tumor_metab_sce$tumor == t]
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs")
dim(each_metabolic_tpm)
View(each_metabolic_tpm)
# Pasamos de 1566 a 1201 genes, eliminando genes con dropout del 100%
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,]
dim(each_metabolic_tpm)
View(each_metabolic_tpm)
ntop <- nrow(x)
rv <- rowVars(x)
select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]
pca <- prcomp(t(x[select,]))
percentVar <- pca$sdev^2 / sum( pca$sdev^2 )
pca <- prcomp(t(x[select,]))
library(scater)
library(stringr)
options(stringsAsFactors=FALSE)
library(pheatmap)
library(gtools)
library(ggplot2)
source("../utils.R")
source("runGSEA_preRank.R")
tumor <- "melanoma"
outDir <- file.path("datasets",tumor)
if(!dir.exists(outDir) ) dir.create(outDir,recursive=TRUE)
pathway_file <- "../Data/KEGG_metabolism.gmt"
selected_sce <- readRDS(file.path("../1-ReadData/datasets/",tumor,"filtered_sce.rds"))
selected_nontumor_sce <- selected_sce[,selected_sce$cellType!="Malignant"]
selected_nontumor_metabolic_sce <- selected_nontumor_sce[rowData(selected_nontumor_sce)$metabolic,]
celltypes <- unique(selected_nontumor_metabolic_sce$cellType)
#2.Tumor cells
enrich_data_df <- data.frame(x=NULL,y=NULL,NES=NULL,PVAL=NULL)
pc_plotdata <- data.frame(x=numeric(),y=numeric(),
sel=character(),types=character())
for (t in celltypes){
t2 <- str_replace(t," ","")
each_metabolic_sce <- selected_nontumor_metabolic_sce[,selected_nontumor_metabolic_sce$cellType==t]
each_metabolic_tpm <- assay(each_metabolic_sce,"exprs")
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm)>0,]
x <- each_metabolic_tpm
ntop <- nrow(x)
rv <- rowVars(x)
select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]
pca <- prcomp(t(x[select,]))
percentVar <- pca$sdev^2 / sum( pca$sdev^2 )
###select PCs that explain at least 80% of the variance
cum_var <- cumsum(percentVar)
select_pcs <- which(cum_var>0.8)[1]
###plot the PCA and explained variances
tmp_plotdata <- data.frame(x=1:length(percentVar),y=percentVar,
sel=c(rep("y",select_pcs),rep("n",length(percentVar)-select_pcs)),
types=rep(t,length(percentVar)))
pc_plotdata <- rbind(pc_plotdata,tmp_plotdata)
###
pre_rank_matrix <- as.matrix(rowSums(abs(pca$rotation[,1:select_pcs])))
runGSEA_preRank(pre_rank_matrix,pathway_file,t2)
#get the result
result_dir <- list.files(path="preRankResults",pattern = paste0("^",t2,".GseaPreranked(.*)"),full.names=T)
result_file <- list.files(path=result_dir,pattern="gsea_report_for_na_pos_(.*).xls",full.names=T)
gsea_result <- read.table(result_file,header = T,sep="\t",row.names=1)
gsea_pathways <- str_to_title(rownames(gsea_result))
gsea_pathways <- str_replace(gsea_pathways,"Tca","TCA")
gsea_pathways <- str_replace(gsea_pathways,"Gpi","GPI")
enrich_data_df <- rbind(enrich_data_df,data.frame(x=t2,y=gsea_pathways,NES=gsea_result$NES,PVAL=gsea_result$NOM.p.val))
}
runGSEA_preRank(pre_rank_matrix,pathway_file,t2)
pc_plotdata
pre_rank_matrix
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"low-OXPHOS-gly-hyp-activity-genes")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Creamos un subset del objeto sce con las células malignas y los 1566 genes metabólicos
tumor_sce <- filtered_sce[rowData(tumor_sce)$metabolic,filtered_sce$cellType == "Malignant"]
# Creamos un subset del objeto sce con las células malignas y los 1566 genes metabólicos
tumor_sce <- filtered_sce[rowData(filtered_sce)$metabolic,filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce <- tumor_sce[rowData(tumor_sce)$metabolic,]
dim(tumor_metabolic_sce)
dim(tumor_sce)
identical(tumor_metabolic_sce, tumor_sce)
tumor_metabolic_sce$tumor <- factor(tumor_metabolic_sce$tumor)
tumor_metabolic_sce$tumor
tumores <- unique(tumor_sce$tumor)
tumores <- unique(tumor_metabolic_sce$tumor)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
hallmarks <- gmtPathways(hallmark_gmt)
all_low_cells <- c()
all_high_cells <- c()
t <- tumores[1]
t
# Usando los genes metabólicos
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_sce
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
dim(each_metabolic_sce)
# Para cada paciente/tumor, creamos un subset con sólo dichas células
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
dim(each_metabolic_sce)
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
dim(each_metabolic_sce)
#  creamos otro subset
tumor_sce <- filtered_sce(filtered_sce$cellType == "Malignant")
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Creamos un subset del objeto sce con las células malignas y los 1566 genes
# metabólicos
tumor_metabolic_sce <- filtered_sce[rowData(filtered_sce)$metabolic,
filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce$tumor <- factor(tumor_metabolic_sce$tumor)
tumores <- unique(tumor_metabolic_sce$tumor)
#  creamos otro subset
tumor_sce <- filtered_sce(filtered_sce$cellType == "Malignant")
#  creamos otro subset
tumor_sce <- filtered_sce[filtered_sce$cellType == "Malignant"]
tumor_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes
tumor_sce <- filtered_sce[filtered_sce$cellType == "Malignant"]
tumor_sce
filtered_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes
tumor_sce <- filtered_sce[filtered_sce$cellType == "Malignant"]
tumor_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
tumor_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes (23.684)
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
# Creamos otro subset del objeto sce con las células malignas y todos los genes (23.684)
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
# Usando todo el genoma dlos genes
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
tumor_sce$tumor
tumor_sce$tumor <- factor(tumor_sce$tumor)
tumor_sce$tumor
# Usando todo el genoma dlos genes
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
# Usando todo el genoma de las células cancerosas
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm) > 0,]
each_tumor_tpm
dim(each_tumor_tpm)
genes_oxphos <- intersect(pathways[["Oxidative phosphorylation"]], rownames(each_tumor_tpm))
genes_glicolisis <- intersect(pathways[["Glycolysis / Gluconeogenesis"]], rownames(each_tumor_tpm))
genes_hipoxia <- intersect(hallmarks[["HALLMARK_HYPOXIA"]], rownames(each_tumor_tpm))
three_all <- unique(c(genes_oxphos,genes_glicolisis,genes_hipoxia))
genes_oxphos
genes_glicolisis
