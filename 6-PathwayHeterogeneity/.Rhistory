gsea_result <- read.table("prerank.rnk",header = T,sep="\t",row.names=1)
gsea_pathways <- str_to_title(rownames(gsea_result))
gsea_pathways <- str_replace(gsea_pathways,"Tca","TCA")
gsea_pathways <- str_replace(gsea_pathways,"Gpi","GPI")
enrich_data_df <- rbind(enrich_data_df,data.frame(x=t,y=gsea_pathways,NES=gsea_result$NES,PVAL=gsea_result$NOM.p.val))
}
#############################################################
###########     0. Carga de paquetes, opciones y datos      ###########
#######################################################################
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(RColorBrewer)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"oxphos-gly-hyp-corr")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Leemos el archivo de las rutas en las que participan los 1566 genes
# metabólicos (este contiene 85 rutas metabólicas)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
all_pathways <- gmtPathways(hallmark_gmt)
# Cargamos las rutas metabólicas a estudiar
genes_OXPHOS <- pathways[["Oxidative phosphorylation"]]
genes_glicolisis <- pathways[["Glycolysis / Gluconeogenesis"]]
genes_hipoxia <- all_pathways[["HALLMARK_HYPOXIA"]]
####################################################################################################
######################################################################################################
###########     1. Correlación entre hipoxia, glicólisis y OXPHOS en células tumorales     ###########
######################################################################################################
# Hacemos un subset del objeto sce original para quedarnos sólo con las células
# tumorales
tumor_sce <- filtered_sce[, filtered_sce$cellType == "Malignant"]
tumor_sce$tumor <- droplevels(tumor_sce$tumor)
neoplasias <- unique(tumor_sce$tumor)
# Vamos a calcular con la función auxiliar `num_of_pathways()` el nº de rutas
# metabólicas en las que participan nuestros genes de interés (1566 genes
# metabólicos)
gene_pathway_num <- num_of_pathways(ruta_archivo_pathways, intersect(unlist(pathways), rownames(filtered_sce)))
# Calculamos la expresión media de los genes de cada proceso metabólico
all_genes_expr <- assay(tumor_sce, "exprs")
expr_oxphos <- all_genes_expr[rownames(all_genes_expr) %in% genes_OXPHOS,]         # Matriz TPM de los genes que participan en OXPHOS
expr_glicolisis <- all_genes_expr[rownames(all_genes_expr) %in% genes_glicolisis,] # Ídem para glicólisis
expr_hipoxia <- all_genes_expr[rownames(all_genes_expr) %in% genes_hipoxia,]       # Y para hipoxia
oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)                          # Para cada célula, calculamos la expresion media de los genes que participan en la ruta metabólica OXHPOS
glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)                  # Lo mismo para glicólisis
hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)                        # Y para hipoxia
data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)   # Agregamos todo en un dataframe
# Calculamos la matriz de correlación para las 3 rutas metabólicas
print("Correlación de las rutas metabólicas de interés:")
print(cor(data, method = "pearson"))  # Usa pearson porque tenemos más de 30 células, y podemos asumir que ambas distribuciones se aproximan a una normal... puedes comprobarlo si creas un objeto aov y lo ploteas, te saldra el qqplot
# Graficamos la regresión lineal para OXPHOS y glicólisis
data_min <- 0   # Rangos máximos y mínimos de dataframe
data_max <- 4
# Calculamos la ecuación de la regresión lineal para mostrarla en el gráfico
a <- lm(Glicolisis ~ OXPHOS, data)
b <- summary(a)
formula1 <- paste0("y = ",round(a$coefficients[[1]], 2), " + ", round(a$coefficients[[2]], 2), "x ;  R = ", round(sqrt(b$adj.r.squared), 2))
p_valor <- pf(q = b$fstatistic[[1]], df1= b$fstatistic[[2]],
df2= b$fstatistic[[3]], lower.tail = F)  # Ya que el summary de un objeto lm nos enseña el p-valor pero no nos los devuelve de manera programática, lo calculamos a partir del estadístico F
formula2 <- paste0("p-value = ", format(p_valor, digits = 3))
# Generamos el gráfico y lo guardamos en un pdf
p = ggplot(data, aes(x = OXPHOS, y = Glicolisis)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "red") +
xlim(data_min, data_max) + ylim(data_min, data_max) +
theme_classic()  + theme(aspect.ratio = 0.8) +
labs(x = "OXPHOS", y = "Glicolisis") +
geom_text(x = 1, y = 3.5, label = formula1) +
geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_Oxphos_Glicolisis.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)   # Evitamos usar la fuente Dingbats porque según la documentación de ggplot2, a veces da problemas
# Ídem para OXPHOS e hipoxia
a <- lm(Hipoxia ~ OXPHOS, data)
b <- summary(a)
formula1 <- paste0("y = ",round(a$coefficients[[1]], 2), " + ", round(a$coefficients[[2]], 2), "x ;  R = ", round(sqrt(b$adj.r.squared), 2))
p_valor <- pf(q = b$fstatistic[[1]], df1= b$fstatistic[[2]],
df2= b$fstatistic[[3]], lower.tail = F)
formula2 <- paste0("p-value = ", format(p_valor, digits = 3))
p = ggplot(data, aes(x = OXPHOS, y = Hipoxia)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "red") +
xlim(data_min, data_max) + ylim(data_min, data_max) +
theme_classic()  + theme(aspect.ratio = 0.8) +
labs(x = "OXPHOS", y = "Hipoxia") +
geom_text(x = 1, y = 3.5, label = formula1) +
geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_Oxphos_Hipoxia.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)
# Ídem para glicólisis e hipoxia
a <- lm(Hipoxia ~ Glicolisis, data)
b <- summary(a)
formula1 <- paste0("y = ",round(a$coefficients[[1]], 2), " + ", round(a$coefficients[[2]], 2), "x ;  R = ", round(sqrt(b$adj.r.squared), 2))
p_valor <- pf(q = b$fstatistic[[1]], df1= b$fstatistic[[2]],
df2= b$fstatistic[[3]], lower.tail = F)
formula2 <- paste0("p-value = ", format(p_valor, digits = 3))
p = ggplot(data, aes(x = Glicolisis, y = Hipoxia)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm",color = "red") +
xlim(data_min, data_max) + ylim(data_min, data_max) +
labs(x = "Glicolisis", y = "Hipoxia") +
theme_classic()  + theme(aspect.ratio = 0.8) +
geom_text(x = 1, y = 3.5, label = formula1) +
geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_Glicolisis_Hipoxia.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)
# # Correlación entre cada tumor (= paciente)
# for( i in neoplasias){
#   each_expr <- assay(tumor_sce[,tumor_sce$tumor == i], "exprs")
#   expr_oxphos <- each_expr[rownames(each_expr) %in% genes_OXPHOS,]
#   expr_glicolisis <- each_expr[rownames(each_expr) %in% genes_glicolisis,]
#   expr_hipoxia <- each_expr[rownames(each_expr) %in% genes_hipoxia,]
#
#   oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)
#   glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)
#   hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)
#   data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)
#   print(paste0("correlacones entre pacientes:",i))
#   print(cor(data))
#  }
# Limpieza RAM
rm(tumor_sce)
gc(verbose = F)
####################################################################################################
##################################################################################################
###########     2. Correlación entre hipoxia, glicólisis y OXPHOS en células sanas     ###########
##################################################################################################
# Hacemos un subset del objeto sce original para quedarnos sólo con las células
# sanas
healthy_sce <- filtered_sce[,filtered_sce$cellType != "Malignant"]
healthy_sce$cellType <-  factor(healthy_sce$cellType)
cell_types <- unique(healthy_sce$cellType)
# Limpieza RAM, ya no necesitamos el objeto filtered_sce
rm(filtered_sce)
gc(verbose = F)
# Inicializamos una matriz de correlaciones vacía de tipos celulares X
# correlaciones
matriz_corr <- matrix(NA, nrow = length(cell_types), ncol = 3,
dimnames = list(cell_types, c("oxphos_glicolosis","oxphos_hipoxia","glicolisis_hipoxia")))
for (c in cell_types) {
each_expr <- assay(healthy_sce[,healthy_sce$cellType == c], "exprs")   # Obtenemos la matriz TPM de las células del linaje de interés
expr_oxphos <- each_expr[rownames(each_expr) %in% genes_OXPHOS,]         # Obtenemos de ahi la matriz TPM de los genes de OXPHOS
expr_glicolisis <- each_expr[rownames(each_expr) %in% genes_glicolisis,] # Ídem para glicólisis
expr_hipoxia <- each_expr[rownames(each_expr) %in% genes_hipoxia,]       # Y para hipoxia
# Para cada célula, calculamos la expresion media (i.e. actividad de la ruta)
# de los genes que participan en la ruta metabólica OXHPOS, glicólisis e
# hipoxia, respectivamente
oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)
glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)
hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)
data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)  # Agregamos todo en un dataframe
# Rellenamos la matriz de correlaciones previamente inicializada
matriz_corr[c,1] <- cor(data[, c("OXPHOS", "Glicolisis")])[1,2]
matriz_corr[c,2] <- cor(data[,c("OXPHOS", "Hipoxia")])[1,2]
matriz_corr[c,3] <- cor(data[,c("Glicolisis", "Hipoxia")])[1,2]
}
# Guardamos las correlaciones entre las 3 rutas de interés en cada linaje
# celular en un archivo tsv
write.table(matriz_corr,
file.path(outDir,"non-malignant_Oxphos_Glicolisis_Hipoxia_corr.tsv"),
row.names = T, col.names = NA, sep = "\t")
pheatmap(matriz_corr)
pheatmap::pheatmap(matriz_corr)
heatmap_non_malignant <- pheatmap::pheatmap(matriz_corr)
color <- colorRampPalette(c("blue", "white", "red"))(100)
# Le decimos al heatmap que use esa paleta de manera gradual, siendo el 2 rojo,
# el 1 blanco y el 0 azul
mybreaks <- c(
seq(0, 0.5, length.out = 33),
seq(0.51, 1.5, length.out = 33),
seq(1.51, max(data), length.out = 34)
)
matriz_corr
colnames(matriz_corr)
for(i in colnames(matriz_corr)){
select_row <- which(rowMaxs(matriz_corr, na.rm = T) == matriz_corr[,i])  # Seleciona las rutas en las que el tipo celular i presenta la actividad máxima de entre todos los tipos celulares
tmp <- rownames(matriz_corr)[select_row][order(matriz_corr[select_row,i], decreasing = T)] # Ordenamos dichas rutas, de mayor a menor actividad
sorted_rows <- c(sorted_rows, tmp)
}
# Correr o no estas dos líneas no parece tener efectos en el heatmap ...
sorted_columns <- apply(matriz_corr[sorted_rows,], 2, function(x) order(x)[nrow(matriz_corr)])
sorted_columns <- names(sorted_columns)
# Ordenamos la actividad máxima de las rutas en cada tipo celular para que
# salgan escalonadas en el heatmap
for(i in colnames(matriz_corr)){
select_row <- which(rowMaxs(matriz_corr, na.rm = T) == matriz_corr[,i])  # Seleciona las rutas en las que el tipo celular i presenta la actividad máxima de entre todos los tipos celulares
tmp <- rownames(matriz_corr)[select_row][order(matriz_corr[select_row,i], decreasing = T)] # Ordenamos dichas rutas, de mayor a menor actividad
sorted_rows <- c(sorted_rows, tmp)
}
colnames(matriz_corr)
rowMaxs(matriz_corr, na.rm = T) == matriz_corr[,i]
sorted_rows <- c()
# Ordenamos la actividad máxima de las rutas en cada tipo celular para que
# salgan escalonadas en el heatmap
for(i in colnames(matriz_corr)){
select_row <- which(rowMaxs(matriz_corr, na.rm = T) == matriz_corr[,i])  # Seleciona las rutas en las que el tipo celular i presenta la actividad máxima de entre todos los tipos celulares
tmp <- rownames(matriz_corr)[select_row][order(matriz_corr[select_row,i], decreasing = T)] # Ordenamos dichas rutas, de mayor a menor actividad
sorted_rows <- c(sorted_rows, tmp)
}
sorted_columns <- c()
sorted_columns <- apply(matriz_corr[sorted_rows,], 2, function(x) order(x)[nrow(matriz_corr)])
sorted_columns <- names(sorted_columns)
sorted_columns
# Las casillas del heatmap sin información se marcan como no significativas
# (fold change = 1)
matriz_corr[is.na(matriz_corr)] <- 1
pheatmap(matriz_corr[sorted_rows, sorted_columns], cluster_cols = F,
cluster_rows = F, color = color, breaks = mybreaks)
pheatmap::pheatmap(matriz_corr[sorted_rows, sorted_columns], cluster_cols = F,
cluster_rows = F, color = color, breaks = mybreaks)
sorted_rows
sorted_columns
matriz_corr
# Generamos el PDF donde guardaremos el heatmap
pdf(file.path(outDir,"KEGGpathway_activity_heatmap_permutation.pdf"), onefile = T,
width = 6, height = 9)
# Generamos la paleta de colores: un gradiente de azul a rojo (pasando por el
# blanco) de 100 pasos
color <- colorRampPalette(c("blue", "white", "red"))(100)
# Le decimos al heatmap que use esa paleta de manera gradual, siendo el 2 rojo,
# el 1 blanco y el 0 azul
mybreaks <- c(
seq(0, 0.5, length.out = 33),
seq(0.51, 1.5, length.out = 33),
seq(1.51, max(data), length.out = 34)
)
sorted_rows <- c()
# Ordenamos la actividad máxima de las rutas en cada tipo celular para que
# salgan escalonadas en el heatmap
for(i in colnames(matriz_corr)){
select_row <- which(rowMaxs(matriz_corr, na.rm = T) == matriz_corr[,i])  # Seleciona las rutas en las que el tipo celular i presenta la actividad máxima de entre todos los tipos celulares
tmp <- rownames(matriz_corr)[select_row][order(matriz_corr[select_row,i], decreasing = T)] # Ordenamos dichas rutas, de mayor a menor actividad
sorted_rows <- c(sorted_rows, tmp)
}
sorted_columns <- c()
# Correr o no estas dos líneas no parece tener efectos en el heatmap ...
sorted_columns <- apply(matriz_corr[sorted_rows,], 2, function(x) order(x)[nrow(matriz_corr)])
sorted_columns <- names(sorted_columns)
# Las casillas del heatmap sin información se marcan como no significativas
# (fold change = 1)
matriz_corr[is.na(matriz_corr)] <- 1
pheatmap::pheatmap(matriz_corr[sorted_rows, sorted_columns], cluster_cols = F,
cluster_rows = F, color = color, breaks = mybreaks)
dev.off()
# Generamos el PDF donde guardaremos el heatmap
pdf(file.path(outDir,"KEGGpathway_activity_heatmap_permutation_Non-malignant.pdf"), onefile = T,
width = 6, height = 9)
# Generamos la paleta de colores: un gradiente de azul a rojo (pasando por el
# blanco) de 100 pasos
color <- colorRampPalette(c("blue", "white", "red"))(100)
# Le decimos al heatmap que use esa paleta de manera gradual, siendo el 2 rojo,
# el 1 blanco y el 0 azul
mybreaks <- c(
seq(0, 0.5, length.out = 33),
seq(0.51, 1.5, length.out = 33),
seq(1.51, max(data), length.out = 34)
)
colnames(matriz_corr)
sorted_rows <- c()
# Ordenamos la actividad máxima de las rutas en cada tipo celular para que
# salgan escalonadas en el heatmap
for(i in colnames(matriz_corr)){
select_row <- which(rowMaxs(matriz_corr, na.rm = T) == matriz_corr[,i])  # Seleciona las rutas en las que el tipo celular i presenta la actividad máxima de entre todos los tipos celulares
tmp <- rownames(matriz_corr)[select_row][order(matriz_corr[select_row,i], decreasing = T)] # Ordenamos dichas rutas, de mayor a menor actividad
sorted_rows <- c(sorted_rows, tmp)
}
##################################################################
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(RColorBrewer)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
argumento <- commandArgs()
argumento <- argumento[6]
# argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"oxphos-gly-hyp-corr")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Leemos el archivo de las rutas en las que participan los 1566 genes
# metabólicos (este contiene 85 rutas metabólicas)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
all_pathways <- gmtPathways(hallmark_gmt)
# Cargamos las rutas metabólicas a estudiar
genes_OXPHOS <- pathways[["Oxidative phosphorylation"]]
genes_glicolisis <- pathways[["Glycolysis / Gluconeogenesis"]]
genes_hipoxia <- all_pathways[["HALLMARK_HYPOXIA"]]
####################################################################################################
######################################################################################################
###########     1. Correlación entre hipoxia, glicólisis y OXPHOS en células tumorales     ###########
######################################################################################################
# Hacemos un subset del objeto sce original para quedarnos sólo con las células
# tumorales
tumor_sce <- filtered_sce[, filtered_sce$cellType == "Malignant"]
tumor_sce$tumor <- droplevels(tumor_sce$tumor)
neoplasias <- unique(tumor_sce$tumor)
# Vamos a calcular con la función auxiliar `num_of_pathways()` el nº de rutas
# metabólicas en las que participan nuestros genes de interés (1566 genes
# metabólicos)
gene_pathway_num <- num_of_pathways(ruta_archivo_pathways, intersect(unlist(pathways), rownames(filtered_sce)))
# Calculamos la expresión media de los genes de cada proceso metabólico
all_genes_expr <- assay(tumor_sce, "exprs")
expr_oxphos <- all_genes_expr[rownames(all_genes_expr) %in% genes_OXPHOS,]         # Matriz TPM de los genes que participan en OXPHOS
expr_glicolisis <- all_genes_expr[rownames(all_genes_expr) %in% genes_glicolisis,] # Ídem para glicólisis
expr_hipoxia <- all_genes_expr[rownames(all_genes_expr) %in% genes_hipoxia,]       # Y para hipoxia
oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)                          # Para cada célula, calculamos la expresion media de los genes que participan en la ruta metabólica OXHPOS
glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)                  # Lo mismo para glicólisis
hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)                        # Y para hipoxia
data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)   # Agregamos todo en un dataframe
# Calculamos la matriz de correlación para las 3 rutas metabólicas
print("Correlación de las rutas metabólicas de interés:")
print(cor(data, method = "pearson"))  # Usa pearson porque tenemos más de 30 células, y podemos asumir que ambas distribuciones se aproximan a una normal... puedes comprobarlo si creas un objeto aov y lo ploteas, te saldra el qqplot
# Graficamos la regresión lineal para OXPHOS y glicólisis
data_min <- 0   # Rangos máximos y mínimos de dataframe
data_max <- 4
# Calculamos la ecuación de la regresión lineal para mostrarla en el gráfico
a <- lm(Glicolisis ~ OXPHOS, data)
b <- summary(a)
formula1 <- paste0("y = ",round(a$coefficients[[1]], 2), " + ", round(a$coefficients[[2]], 2), "x ;  R = ", round(sqrt(b$adj.r.squared), 2))
p_valor <- pf(q = b$fstatistic[[1]], df1= b$fstatistic[[2]],
df2= b$fstatistic[[3]], lower.tail = F)  # Ya que el summary de un objeto lm nos enseña el p-valor pero no nos los devuelve de manera programática, lo calculamos a partir del estadístico F
formula2 <- paste0("p-value = ", format(p_valor, digits = 3))
# Generamos el gráfico y lo guardamos en un pdf
p = ggplot(data, aes(x = OXPHOS, y = Glicolisis)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "red") +
xlim(data_min, data_max) + ylim(data_min, data_max) +
theme_classic()  + theme(aspect.ratio = 0.8) +
labs(x = "OXPHOS", y = "Glicolisis") +
geom_text(x = 1, y = 3.5, label = formula1) +
geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_Oxphos_Glicolisis.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)   # Evitamos usar la fuente Dingbats porque según la documentación de ggplot2, a veces da problemas
# Ídem para OXPHOS e hipoxia
a <- lm(Hipoxia ~ OXPHOS, data)
b <- summary(a)
formula1 <- paste0("y = ",round(a$coefficients[[1]], 2), " + ", round(a$coefficients[[2]], 2), "x ;  R = ", round(sqrt(b$adj.r.squared), 2))
p_valor <- pf(q = b$fstatistic[[1]], df1= b$fstatistic[[2]],
df2= b$fstatistic[[3]], lower.tail = F)
formula2 <- paste0("p-value = ", format(p_valor, digits = 3))
p = ggplot(data, aes(x = OXPHOS, y = Hipoxia)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm", color = "red") +
xlim(data_min, data_max) + ylim(data_min, data_max) +
theme_classic()  + theme(aspect.ratio = 0.8) +
labs(x = "OXPHOS", y = "Hipoxia") +
geom_text(x = 1, y = 3.5, label = formula1) +
geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_Oxphos_Hipoxia.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)
# Ídem para glicólisis e hipoxia
a <- lm(Hipoxia ~ Glicolisis, data)
b <- summary(a)
formula1 <- paste0("y = ",round(a$coefficients[[1]], 2), " + ", round(a$coefficients[[2]], 2), "x ;  R = ", round(sqrt(b$adj.r.squared), 2))
p_valor <- pf(q = b$fstatistic[[1]], df1= b$fstatistic[[2]],
df2= b$fstatistic[[3]], lower.tail = F)
formula2 <- paste0("p-value = ", format(p_valor, digits = 3))
p = ggplot(data, aes(x = Glicolisis, y = Hipoxia)) +
geom_point(size = 0.5) +
geom_smooth(method = "lm",color = "red") +
xlim(data_min, data_max) + ylim(data_min, data_max) +
labs(x = "Glicolisis", y = "Hipoxia") +
theme_classic()  + theme(aspect.ratio = 0.8) +
geom_text(x = 1, y = 3.5, label = formula1) +
geom_text(x = .75, y = 3, label = formula2) +
theme(axis.line = element_line(size = 0.3, colour = "black"),
axis.ticks = element_line(size = 0.3, color = "black"),
axis.text.x = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 8),
axis.title.y = element_text(size = 8))
ggsave(filename = file.path(outDir,"malignant_Glicolisis_Hipoxia.pdf"), p,
device = "pdf", width = 6, height = 4, units = "in",
useDingbats = FALSE)
# # Correlación entre cada tumor (= paciente)
# for( i in neoplasias){
#   each_expr <- assay(tumor_sce[,tumor_sce$tumor == i], "exprs")
#   expr_oxphos <- each_expr[rownames(each_expr) %in% genes_OXPHOS,]
#   expr_glicolisis <- each_expr[rownames(each_expr) %in% genes_glicolisis,]
#   expr_hipoxia <- each_expr[rownames(each_expr) %in% genes_hipoxia,]
#
#   oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)
#   glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)
#   hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)
#   data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)
#   print(paste0("correlacones entre pacientes:",i))
#   print(cor(data))
#  }
# Limpieza RAM
rm(tumor_sce)
gc(verbose = F)
####################################################################################################
##################################################################################################
###########     2. Correlación entre hipoxia, glicólisis y OXPHOS en células sanas     ###########
##################################################################################################
# Hacemos un subset del objeto sce original para quedarnos sólo con las células
# sanas
healthy_sce <- filtered_sce[,filtered_sce$cellType != "Malignant"]
healthy_sce$cellType <-  factor(healthy_sce$cellType)
cell_types <- unique(healthy_sce$cellType)
# Limpieza RAM, ya no necesitamos el objeto filtered_sce
rm(filtered_sce)
gc(verbose = F)
# Inicializamos una matriz de correlaciones vacía de tipos celulares X
# correlaciones
matriz_corr <- matrix(NA, nrow = length(cell_types), ncol = 3,
dimnames = list(cell_types, c("oxphos_glicolosis","oxphos_hipoxia","glicolisis_hipoxia")))
for (c in cell_types) {
each_expr <- assay(healthy_sce[,healthy_sce$cellType == c], "exprs")   # Obtenemos la matriz TPM de las células del linaje de interés
expr_oxphos <- each_expr[rownames(each_expr) %in% genes_OXPHOS,]         # Obtenemos de ahi la matriz TPM de los genes de OXPHOS
expr_glicolisis <- each_expr[rownames(each_expr) %in% genes_glicolisis,] # Ídem para glicólisis
expr_hipoxia <- each_expr[rownames(each_expr) %in% genes_hipoxia,]       # Y para hipoxia
# Para cada célula, calculamos la expresion media (i.e. actividad de la ruta)
# de los genes que participan en la ruta metabólica OXHPOS, glicólisis e
# hipoxia, respectivamente
oxphos <- colMeans(as.matrix(expr_oxphos), na.rm = T)
glicolisis <- colMeans(as.matrix(expr_glicolisis), na.rm = T)
hipoxia <- colMeans(as.matrix(expr_hipoxia), na.rm = T)
data <- data.frame(OXPHOS = oxphos, Glicolisis = glicolisis, Hipoxia = hipoxia)  # Agregamos todo en un dataframe
# Rellenamos la matriz de correlaciones previamente inicializada
matriz_corr[c,1] <- cor(data[, c("OXPHOS", "Glicolisis")])[1,2]
matriz_corr[c,2] <- cor(data[,c("OXPHOS", "Hipoxia")])[1,2]
matriz_corr[c,3] <- cor(data[,c("Glicolisis", "Hipoxia")])[1,2]
}
# Guardamos las correlaciones entre las 3 rutas de interés en cada linaje
# celular en un archivo tsv
write.table(matriz_corr,
file.path(outDir,"non-malignant_Oxphos_Glicolisis_Hipoxia_corr.tsv"),
row.names = T, col.names = NA, sep = "\t")
# Generamos el PDF donde guardaremos el heatmap
pdf(file.path(outDir,"KEGGpathway_activity_heatmap_permutation_Non-malignant.pdf"), onefile = T,
width = 6, height = 9)
# Generamos la paleta de colores: un gradiente de azul a rojo (pasando por el
# blanco) de 100 pasos
color <- colorRampPalette(c("blue", "white", "red"))(100)
# Le decimos al heatmap que use esa paleta de manera gradual, siendo el 2 rojo,
# el 1 blanco y el 0 azul
mybreaks <- c(
seq(0, 0.5, length.out = 33),
seq(0.51, 1.5, length.out = 33),
seq(1.51, max(data), length.out = 34)
)
# Ordenamos la actividad máxima de las rutas en cada tipo celular para que
# salgan escalonadas en el heatmap
sorted_rows <- c()
for(i in colnames(matriz_corr)){
select_row <- which(rowMaxs(matriz_corr, na.rm = T) == matriz_corr[,i])  # Seleciona las rutas en las que el tipo celular i presenta la actividad máxima de entre todos los tipos celulares
tmp <- rownames(matriz_corr)[select_row][order(matriz_corr[select_row,i], decreasing = T)] # Ordenamos dichas rutas, de mayor a menor actividad
sorted_rows <- c(sorted_rows, tmp)
}
# Correr o no estas dos líneas no parece tener efectos en el heatmap ...
sorted_columns <- c()
sorted_columns <- apply(matriz_corr[sorted_rows,], 2, function(x) order(x)[nrow(matriz_corr)])
sorted_columns <- names(sorted_columns)
# Las casillas del heatmap sin información se marcan como no significativas
# (fold change = 1)
matriz_corr[is.na(matriz_corr)] <- 1
pheatmap::pheatmap(matriz_corr[sorted_rows, sorted_columns], cluster_cols = F,
cluster_rows = F, color = color, breaks = mybreaks)
dev.off()
