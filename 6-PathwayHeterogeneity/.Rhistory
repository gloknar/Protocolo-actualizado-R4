View(each_metabolic_tpm)
ntop <- nrow(x)
rv <- rowVars(x)
select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]
pca <- prcomp(t(x[select,]))
percentVar <- pca$sdev^2 / sum( pca$sdev^2 )
pca <- prcomp(t(x[select,]))
library(scater)
library(stringr)
options(stringsAsFactors=FALSE)
library(pheatmap)
library(gtools)
library(ggplot2)
source("../utils.R")
source("runGSEA_preRank.R")
tumor <- "melanoma"
outDir <- file.path("datasets",tumor)
if(!dir.exists(outDir) ) dir.create(outDir,recursive=TRUE)
pathway_file <- "../Data/KEGG_metabolism.gmt"
selected_sce <- readRDS(file.path("../1-ReadData/datasets/",tumor,"filtered_sce.rds"))
selected_nontumor_sce <- selected_sce[,selected_sce$cellType!="Malignant"]
selected_nontumor_metabolic_sce <- selected_nontumor_sce[rowData(selected_nontumor_sce)$metabolic,]
celltypes <- unique(selected_nontumor_metabolic_sce$cellType)
#2.Tumor cells
enrich_data_df <- data.frame(x=NULL,y=NULL,NES=NULL,PVAL=NULL)
pc_plotdata <- data.frame(x=numeric(),y=numeric(),
sel=character(),types=character())
for (t in celltypes){
t2 <- str_replace(t," ","")
each_metabolic_sce <- selected_nontumor_metabolic_sce[,selected_nontumor_metabolic_sce$cellType==t]
each_metabolic_tpm <- assay(each_metabolic_sce,"exprs")
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm)>0,]
x <- each_metabolic_tpm
ntop <- nrow(x)
rv <- rowVars(x)
select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]
pca <- prcomp(t(x[select,]))
percentVar <- pca$sdev^2 / sum( pca$sdev^2 )
###select PCs that explain at least 80% of the variance
cum_var <- cumsum(percentVar)
select_pcs <- which(cum_var>0.8)[1]
###plot the PCA and explained variances
tmp_plotdata <- data.frame(x=1:length(percentVar),y=percentVar,
sel=c(rep("y",select_pcs),rep("n",length(percentVar)-select_pcs)),
types=rep(t,length(percentVar)))
pc_plotdata <- rbind(pc_plotdata,tmp_plotdata)
###
pre_rank_matrix <- as.matrix(rowSums(abs(pca$rotation[,1:select_pcs])))
runGSEA_preRank(pre_rank_matrix,pathway_file,t2)
#get the result
result_dir <- list.files(path="preRankResults",pattern = paste0("^",t2,".GseaPreranked(.*)"),full.names=T)
result_file <- list.files(path=result_dir,pattern="gsea_report_for_na_pos_(.*).xls",full.names=T)
gsea_result <- read.table(result_file,header = T,sep="\t",row.names=1)
gsea_pathways <- str_to_title(rownames(gsea_result))
gsea_pathways <- str_replace(gsea_pathways,"Tca","TCA")
gsea_pathways <- str_replace(gsea_pathways,"Gpi","GPI")
enrich_data_df <- rbind(enrich_data_df,data.frame(x=t2,y=gsea_pathways,NES=gsea_result$NES,PVAL=gsea_result$NOM.p.val))
}
runGSEA_preRank(pre_rank_matrix,pathway_file,t2)
pc_plotdata
pre_rank_matrix
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"low-OXPHOS-gly-hyp-activity-genes")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Creamos un subset del objeto sce con las células malignas y los 1566 genes metabólicos
tumor_sce <- filtered_sce[rowData(tumor_sce)$metabolic,filtered_sce$cellType == "Malignant"]
# Creamos un subset del objeto sce con las células malignas y los 1566 genes metabólicos
tumor_sce <- filtered_sce[rowData(filtered_sce)$metabolic,filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce <- tumor_sce[rowData(tumor_sce)$metabolic,]
dim(tumor_metabolic_sce)
dim(tumor_sce)
identical(tumor_metabolic_sce, tumor_sce)
tumor_metabolic_sce$tumor <- factor(tumor_metabolic_sce$tumor)
tumor_metabolic_sce$tumor
tumores <- unique(tumor_sce$tumor)
tumores <- unique(tumor_metabolic_sce$tumor)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
hallmarks <- gmtPathways(hallmark_gmt)
all_low_cells <- c()
all_high_cells <- c()
t <- tumores[1]
t
# Usando los genes metabólicos
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_sce
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
dim(each_metabolic_sce)
# Para cada paciente/tumor, creamos un subset con sólo dichas células
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
dim(each_metabolic_sce)
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
dim(each_metabolic_sce)
#  creamos otro subset
tumor_sce <- filtered_sce(filtered_sce$cellType == "Malignant")
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Creamos un subset del objeto sce con las células malignas y los 1566 genes
# metabólicos
tumor_metabolic_sce <- filtered_sce[rowData(filtered_sce)$metabolic,
filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce$tumor <- factor(tumor_metabolic_sce$tumor)
tumores <- unique(tumor_metabolic_sce$tumor)
#  creamos otro subset
tumor_sce <- filtered_sce(filtered_sce$cellType == "Malignant")
#  creamos otro subset
tumor_sce <- filtered_sce[filtered_sce$cellType == "Malignant"]
tumor_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes
tumor_sce <- filtered_sce[filtered_sce$cellType == "Malignant"]
tumor_sce
filtered_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes
tumor_sce <- filtered_sce[filtered_sce$cellType == "Malignant"]
tumor_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
tumor_sce
# Creamos otro subset del objeto sce con las células malignas y todos los genes (23.684)
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
# Creamos otro subset del objeto sce con las células malignas y todos los genes (23.684)
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
# Usando todo el genoma dlos genes
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
tumor_sce$tumor
tumor_sce$tumor <- factor(tumor_sce$tumor)
tumor_sce$tumor
# Usando todo el genoma dlos genes
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
# Usando todo el genoma de las células cancerosas
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm) > 0,]
each_tumor_tpm
dim(each_tumor_tpm)
genes_oxphos <- intersect(pathways[["Oxidative phosphorylation"]], rownames(each_tumor_tpm))
genes_glicolisis <- intersect(pathways[["Glycolysis / Gluconeogenesis"]], rownames(each_tumor_tpm))
genes_hipoxia <- intersect(hallmarks[["HALLMARK_HYPOXIA"]], rownames(each_tumor_tpm))
three_all <- unique(c(genes_oxphos,genes_glicolisis,genes_hipoxia))
genes_oxphos
genes_glicolisis
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"low-OXPHOS-gly-hyp-activity-genes")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma filtrado
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Creamos un subset del objeto sce con las células malignas y los 1566 genes
# metabólicos
tumor_metabolic_sce <- filtered_sce[rowData(filtered_sce)$metabolic,
filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce$tumor <- factor(tumor_metabolic_sce$tumor)
tumores <- unique(tumor_metabolic_sce$tumor)
# Creamos otro subset del objeto sce con las células malignas y todos los genes (23.684)
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
tumor_sce$tumor <- factor(tumor_sce$tumor)
# Leemos el archivo de las rutas en las que participan los 1566 genes
# metabólicos (este contiene 85 rutas metabólicas)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
hallmarks <- gmtPathways(hallmark_gmt)
####################################################################################################
##############################################
###########     1. PLACEHOLDER     ###########
##############################################
#2.Tumor cells
# Inicializamos 2 vectores vacíos
all_low_cells <- c()
all_high_cells <- c()
t <- tumores[1]
t
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
# Usando todo el genoma de las células cancerosas
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm) > 0,]
# Obtenemos los genes que participan en las rutas de interés
genes_oxphos <- intersect(pathways[["Oxidative phosphorylation"]], rownames(each_tumor_tpm))
genes_glicolisis <- intersect(pathways[["Glycolysis / Gluconeogenesis"]], rownames(each_tumor_tpm))
genes_hipoxia <- intersect(hallmarks[["HALLMARK_HYPOXIA"]], rownames(each_tumor_tpm))
genes_hipoxia
each_tumor_tpm
each_tumor_tpm[three_all,]
three_all <- unique(c(genes_oxphos,genes_glicolisis,genes_hipoxia))
each_tumor_tpm[three_all,]
#
oxphos_mean_exprs <- colMeans(each_tumor_tpm[three_all,], na.rm = T)
oxphos_mean_exprs
oxphos_mean_exprs_quantile <- quantile(oxphos_mean_exprs,seq(0,1,0.2))
oxphos_mean_exprs_quantile
oxphos_mean_exprs_quantile[["20%"]]
low_cutoff <- oxphos_mean_exprs_quantile[["20%"]]
high_cutoff <- oxphos_mean_exprs_quantile[["80%"]]
oxphos_mean_exprs < low_cutoff
oxphos_low <- which(oxphos_mean_exprs < low_cutoff)
oxphos_high <- which(oxphos_mean_exprs > high_cutoff)
colnames(each_tumor_tpm)
all_low_cells
colnames(each_tumor_tpm)[oxphos_low]
all_low_cells <- c(all_low_cells, colnames(each_tumor_tpm)[oxphos_low]) # Append a los vector vacíos los nombres de las células
all_high_cells <- c(all_high_cells, colnames(each_tumor_tpm)[oxphos_high])
all_low_cells
all_high_cells
if(length(oxphos_low) < 5 | length(oxphos_high) < 5){
message('Si tenemos menos de 5 outliers en cada extremo del tumor,',t,' pasamos al siguiente tumor. Omitiendo el tumor',t,'...')
next
}
message('Si tenemos menos de 5 outliers en cada extremo del tumor,',t,' pasamos al siguiente tumor. Omitiendo el tumor',t,'...')
message('Si tenemos menos de 5 outliers en cada extremo del tumor ',t,', pasamos al siguiente tumor. Omitiendo el tumor',t,'...')
oxphos_low
message('Tenemos menos de 5 células outliers en cada extremo del tumor ',t,', pasamos al siguiente tumor. Omitiendo dicho tumor...')
# t <- tumores[1]
for(t in tumores){
# Para cada paciente/tumor, creamos un subset con sólo dichas células
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
# Usando todo el genoma de las células cancerosas
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm) > 0,]
# Obtenemos los genes que participan en las rutas de interés
genes_oxphos <- intersect(pathways[["Oxidative phosphorylation"]], rownames(each_tumor_tpm))
genes_glicolisis <- intersect(pathways[["Glycolysis / Gluconeogenesis"]], rownames(each_tumor_tpm))
genes_hipoxia <- intersect(hallmarks[["HALLMARK_HYPOXIA"]], rownames(each_tumor_tpm))
three_all <- unique(c(genes_oxphos,genes_glicolisis,genes_hipoxia))
# Calculamos la actividad media de todos los genes que participan en cualquiera
# de las 3 rutas
oxphos_mean_exprs <- colMeans(each_tumor_tpm[three_all,], na.rm = T)
oxphos_mean_exprs_quantile <- quantile(oxphos_mean_exprs, seq(0, 1, 0.2))
low_cutoff <- oxphos_mean_exprs_quantile[["20%"]]
high_cutoff <- oxphos_mean_exprs_quantile[["80%"]]
oxphos_low <- which(oxphos_mean_exprs < low_cutoff)
oxphos_high <- which(oxphos_mean_exprs > high_cutoff)
all_low_cells <- c(all_low_cells, colnames(each_tumor_tpm)[oxphos_low]) # Append a los vector vacíos los nombres de las células
all_high_cells <- c(all_high_cells, colnames(each_tumor_tpm)[oxphos_high])
# Comprobación de cantidad suficiente de células outlier
if(length(oxphos_low) < 5 | length(oxphos_high) < 5){
message('Tenemos menos de 5 células outliers en cada extremo del tumor ',t,', pasamos al siguiente tumor. Omitiendo dicho tumor...')
next
}
condition <- factor(c(rep("oxphos_low",length(oxphos_low)),rep("oxphos_high",length(oxphos_high))),levels = c("oxphos_low","oxphos_high"))
each_tumor_tpm_selected <- each_tumor_tpm[,c(oxphos_low,oxphos_high)]
pvalues <- sapply(X = 1:nrow(each_tumor_tpm_selected),
FUN = function(x) {
return(wilcox.test(each_tumor_tpm_selected[x,] ~ condition, alternative="greater")$p.value)
})
pvalues_df <- data.frame(pvalues,row.names=rownames(each_tumor_tpm_selected))
# Guardamos aquellos genes con un p-valor < 0.01 en un archivo
write.table(rownames(pvalues_df[pvalues_df$pvalues<=0.01,,drop=F]),
file=file.path(outDir,paste0(t,"_low_OXPHOS_glycolysis_hypoxia_signature.genes.txt")),
quote=F,row.names=F,col.names=F)
}
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"low-OXPHOS-gly-hyp-activity-genes")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma filtrado
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Creamos un subset del objeto sce con las células malignas y los 1566 genes
# metabólicos
tumor_metabolic_sce <- filtered_sce[rowData(filtered_sce)$metabolic,
filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce$tumor <- factor(tumor_metabolic_sce$tumor)
tumores <- unique(tumor_metabolic_sce$tumor)
# Creamos otro subset del objeto sce con las células malignas y todos los genes (23.684)
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
tumor_sce$tumor <- factor(tumor_sce$tumor)
# Leemos el archivo de las rutas en las que participan los 1566 genes
# metabólicos (este contiene 85 rutas metabólicas)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
hallmarks <- gmtPathways(hallmark_gmt)
####################################################################################################
##############################################
###########     1. PLACEHOLDER     ###########
##############################################
#2.Tumor cells
# Inicializamos 2 vectores vacíos
all_low_cells <- c()
all_high_cells <- c()
# t <- tumores[1]
for(t in tumores){
# Para cada paciente/tumor, creamos un subset con sólo dichas células
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
# Usando todo el genoma de las células cancerosas
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm) > 0,]
# Obtenemos los genes que participan en las rutas de interés
genes_oxphos <- intersect(pathways[["Oxidative phosphorylation"]], rownames(each_tumor_tpm))
genes_glicolisis <- intersect(pathways[["Glycolysis / Gluconeogenesis"]], rownames(each_tumor_tpm))
genes_hipoxia <- intersect(hallmarks[["HALLMARK_HYPOXIA"]], rownames(each_tumor_tpm))
three_all <- unique(c(genes_oxphos,genes_glicolisis,genes_hipoxia))
# Calculamos la actividad media de todos los genes que participan en cualquiera
# de las 3 rutas
oxphos_mean_exprs <- colMeans(each_tumor_tpm[three_all,], na.rm = T)
oxphos_mean_exprs_quantile <- quantile(oxphos_mean_exprs, seq(0, 1, 0.2))
low_cutoff <- oxphos_mean_exprs_quantile[["20%"]]
high_cutoff <- oxphos_mean_exprs_quantile[["80%"]]
oxphos_low <- which(oxphos_mean_exprs < low_cutoff)
oxphos_high <- which(oxphos_mean_exprs > high_cutoff)
all_low_cells <- c(all_low_cells, colnames(each_tumor_tpm)[oxphos_low]) # Append a los vector vacíos los nombres de las células
all_high_cells <- c(all_high_cells, colnames(each_tumor_tpm)[oxphos_high])
# Comprobación de cantidad suficiente de células outlier
if(length(oxphos_low) < 5 | length(oxphos_high) < 5){
message('Tenemos menos de 5 células outliers en cada extremo del tumor ',t,', pasamos al siguiente tumor. Omitiendo dicho tumor...')
next
}
condition <- factor(c(rep("oxphos_low", length(oxphos_low)),
rep("oxphos_high", length(oxphos_high))),
levels = c("oxphos_low", "oxphos_high"))
each_tumor_tpm_selected <- each_tumor_tpm[,c(oxphos_low,oxphos_high)]
pvalues <- sapply(X = 1:nrow(each_tumor_tpm_selected),
FUN = function(x) {
return(wilcox.test(each_tumor_tpm_selected[x,] ~ condition, alternative="greater")$p.value)
})
pvalues_df <- data.frame(pvalues,row.names=rownames(each_tumor_tpm_selected))
# Guardamos aquellos genes con un p-valor < 0.01 en un archivo
write.table(rownames(pvalues_df[pvalues_df$pvalues<=0.01,,drop=F]),
file=file.path(outDir,paste0(t,"_low_OXPHOS_glycolysis_hypoxia_signature.genes.txt")),
quote=F,row.names=F,col.names=F)
}
##all together
selected_tumor_tpm <- assay(tumor_sce, "exprs")
selected_tumor_tpm <- selected_tumor_tpm[rowSums(selected_tumor_tpm) > 0,]
condition <- factor(c(rep("oxphos_low",length(all_low_cells)),rep("oxphos_high",length(all_high_cells))),levels = c("oxphos_low","oxphos_high"))
selected_tumor_tpm_selected <- selected_tumor_tpm[,c(all_low_cells,all_high_cells)]
pvalues <- sapply(X = 1:nrow(selected_tumor_tpm_selected),
FUN = function(x) {
return(wilcox.test(selected_tumor_tpm_selected[x,] ~ condition, alternative="greater")$p.value)
})
pvalues_df <- data.frame(pvalues,row.names=rownames(selected_tumor_tpm_selected))
# Guardamos aquellos genes con un p-valor < 0.01 en un archivo
write.table(rownames(pvalues_df[pvalues_df$pvalues<=0.01,,drop=F]),
file=file.path(outDir,paste0("ALL","_low_OXPHOS_glycolysis_hypoxia_signature.txt")),
quote=F,row.names=F,col.names=F)
# Paquetes y funciones auxiliares
library(scater)
library(stringr)
library(pheatmap)
library(gtools)
source("../utils.R")
# Opciones
options(stringsAsFactors = FALSE)
# argumento <- commandArgs()
# argumento <- argumento[6]
argumento <- "melanoma"
outDir <- file.path("./datasets",argumento,"low-OXPHOS-gly-hyp-activity-genes")
if (!dir.exists(outDir)) {
dir.create(outDir, recursive = TRUE)
}
# Leemos el dataset del head_neck/melanoma filtrado
filtered_sce <- readRDS(file.path("../1-ReadData/datasets/",argumento,"filtered_sce.rds"))
# Creamos un subset del objeto sce con las células malignas y los 1566 genes
# metabólicos
tumor_metabolic_sce <- filtered_sce[rowData(filtered_sce)$metabolic,
filtered_sce$cellType == "Malignant"]
tumor_metabolic_sce$tumor <- factor(tumor_metabolic_sce$tumor)
tumores <- unique(tumor_metabolic_sce$tumor)
# Creamos otro subset del objeto sce con las células malignas y todos los genes (23.684)
tumor_sce <- filtered_sce[,filtered_sce$cellType == "Malignant"]
tumor_sce$tumor <- factor(tumor_sce$tumor)
# Leemos el archivo de las rutas en las que participan los 1566 genes
# metabólicos (este contiene 85 rutas metabólicas)
ruta_archivo_pathways <- "../Data/KEGG_metabolism.gmt"
pathways <- gmtPathways(ruta_archivo_pathways)
# Este contiene 50 rutas metabólicas (parece que contiene los genes que
# participan en respuesta a hipoxia)
hallmark_gmt <- '../Data/h.all.v6.1.symbols.gmt'
hallmarks <- gmtPathways(hallmark_gmt)
####################################################################################################
##############################################
###########     1. PLACEHOLDER     ###########
##############################################
#2.Tumor cells
# Inicializamos 2 vectores vacíos
all_low_cells <- c()
all_high_cells <- c()
t <- tumores[1]
each_metabolic_sce <- tumor_metabolic_sce[,tumor_metabolic_sce$tumor == t] # sce con células malignas que pertenecen al tumor t y los 1566 genes metabólicos
each_metabolic_tpm <- assay(each_metabolic_sce, "exprs") # Obtenemos la matriz de TPM de esas células
each_metabolic_tpm <- each_metabolic_tpm[rowSums(each_metabolic_tpm) > 0,] # Eliminamos los genes con dropout del 100%
# Usando todo el genoma de las células cancerosas
each_tumor_sce <- tumor_sce[,tumor_sce$tumor == t]
each_tumor_tpm <- assay(each_tumor_sce, "exprs")
each_tumor_tpm <- each_tumor_tpm[rowSums(each_tumor_tpm) > 0,]
# Obtenemos los genes que participan en las rutas de interés
genes_oxphos <- intersect(pathways[["Oxidative phosphorylation"]], rownames(each_tumor_tpm))
genes_glicolisis <- intersect(pathways[["Glycolysis / Gluconeogenesis"]], rownames(each_tumor_tpm))
genes_hipoxia <- intersect(hallmarks[["HALLMARK_HYPOXIA"]], rownames(each_tumor_tpm))
three_all <- unique(c(genes_oxphos,genes_glicolisis,genes_hipoxia))
# Calculamos la actividad media de todos los genes que participan en cualquiera
# de las 3 rutas
oxphos_mean_exprs <- colMeans(each_tumor_tpm[three_all,], na.rm = T)
oxphos_mean_exprs_quantile <- quantile(oxphos_mean_exprs, seq(0, 1, 0.2))
low_cutoff <- oxphos_mean_exprs_quantile[["20%"]]
high_cutoff <- oxphos_mean_exprs_quantile[["80%"]]
oxphos_low <- which(oxphos_mean_exprs < low_cutoff)
oxphos_high <- which(oxphos_mean_exprs > high_cutoff)
all_low_cells <- c(all_low_cells, colnames(each_tumor_tpm)[oxphos_low]) # Append a los vector vacíos los nombres de las células
all_high_cells <- c(all_high_cells, colnames(each_tumor_tpm)[oxphos_high])
# Comprobación de cantidad suficiente de células outlier
if(length(oxphos_low) < 5 | length(oxphos_high) < 5){
message('Tenemos menos de 5 células outliers en cada extremo del tumor ',t,', pasamos al siguiente tumor. Omitiendo dicho tumor...')
next
}
condition <- factor(c(rep("oxphos_low", length(oxphos_low)),
rep("oxphos_high", length(oxphos_high))),
levels = c("oxphos_low", "oxphos_high"))
condition
each_tumor_tpm_selected <- each_tumor_tpm[,c(oxphos_low,oxphos_high)]
each_tumor_tpm_selected
dim(each_tumor_tpm_selected)
pvalues <- sapply(X = 1:nrow(each_tumor_tpm_selected),
FUN = function(x) {
return(wilcox.test(each_tumor_tpm_selected[x,] ~ condition, alternative="greater")$p.value)
})
pvalues
dim(pvalues)
length(pvalues)
nrow(each_tumor_tpm_selected)
range(pvalues)
condition
# El p-valor de cada gen expresado en cualquier tumor/paciente
pvalues <- sapply(X = 1 : nrow(each_tumor_tpm_selected),  # Esto son los genes
FUN = function(x) { # Les hacemos un wilcox test (t-test no parmetrico) con alternativa "greater"
return(wilcox.test(x= each_tumor_tpm_selected[x,], y = condition, alternative = "greater")$p.value)
})
return(wilcox.test(y = each_tumor_tpm_selected[x,], x = condition, alternative = "greater")$p.value)
return(wilcox.test(y = each_tumor_tpm_selected[x,], x = condition, alternative = "greater")$p.value)
# El p-valor de cada gen expresado en cualquier tumor/paciente
pvalues <- sapply(X = 1 : nrow(each_tumor_tpm_selected),  # Esto son los genes
FUN = function(x) { # Les hacemos un wilcox test (t-test no parmetrico) con alternativa "greater"
return(wilcox.test(each_tumor_tpm_selected[x,] ~ condition, alternative = "greater")$p.value)
})
pvalues_df <- data.frame(pvalues,row.names=rownames(each_tumor_tpm_selected))
pvalues_df
rownames(each_tumor_tpm_selected)
pvalues
pvalues_df <- data.frame(pvalues, row.names = rownames(each_tumor_tpm_selected))
# Guardamos aquellos genes con un p-valor < 0.01 en un archivo
write.table(file = file.path(outDir,paste0(t,"_low_OXPHOS_glycolysis_hypoxia_signature.genes.txt")),
rownames(pvalues_df[pvalues_df$pvalues<=0.01,,drop=F]),
quote=F,row.names=F,col.names=F)
# Guardamos aquellos genes con un p-valor < 0.01 en un archivo
write.table(file = file.path(outDir,paste0(t,"_low_OXPHOS_glycolysis_hypoxia_signature.genes.txt")),
rownames(pvalues_df[pvalues_df$pvalues<=0.01, drop = F]),
quote = F, row.names = F, col.names = F)
# Guardamos aquellos genes con un p-valor < 0.01 en un archivo
write.table(file = file.path(outDir,paste0(t,"_low_OXPHOS_glycolysis_hypoxia_signature.genes.txt")),
rownames(pvalues_df[pvalues_df$pvalues<=0.01, ,drop = F]),
quote = F, row.names = F, col.names = F)
selected_tumor_tpm <- assay(tumor_sce, "exprs")
selected_tumor_tpm
dim(selected_tumor_tpm)
selected_tumor_tpm <- selected_tumor_tpm[rowSums(selected_tumor_tpm) > 0,]
dim(selected_tumor_tpm)
condition <- factor(c(rep("oxphos_low", length(all_low_cells)),
rep("oxphos_high", length(all_high_cells))),
levels = c("oxphos_low", "oxphos_high"))
condition
